import cvxopt.solvers
X, y = get_dataset(ls.get_training_examples)
m = X.shape[0]
# Gram matrix - The matrix of all possible inner products of X.
K = np.array([np.dot(X[i], X[j])
for j in range(m)
for i in range(m)]).reshape((m, m))
P = cvxopt.matrix(np.outer(y, y) * K)
q = cvxopt.matrix(-1 * np.ones(m))
# Equality constraints
A = cvxopt.matrix(y, (1, m))
b = cvxopt.matrix(0.0)
# Inequality constraints
G = cvxopt.matrix(np.diag(-1 * np.ones(m)))
h = cvxopt.matrix(np.zeros(m))
# Solve the problem
solution = cvxopt.solvers.qp(P, q, G, h, A, b)
# Lagrange multipliers
multipliers = np.ravel(solution['x'])
# Support vectors have positive multipliers.
has_positive_multiplier = multipliers > 1e-7
sv_multipliers = multipliers[has_positive_multiplier]
support_vectors = X[has_positive_multiplier]
support_vectors_y = y[has_positive_multiplier]
